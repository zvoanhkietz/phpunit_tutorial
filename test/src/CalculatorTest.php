<?php
namespace App\Test;

use App\Calculator;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-28 at 15:07:03.
 */
class CalculatorTest extends TestCase
{

    /**
     * @var Calculator
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Calculator;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * Generated from @assert (0, 0) == 0.
     *
     * @covers App\Calculator::plus
     */
    public function testPlus() {
        $this->assertEquals(
                0, $this->object->plus(0, 0)
        );
    }

    /**
     * Generated from @assert (0, 1) == 1.
     *
     * @covers App\Calculator::plus
     */
    public function testPlus2() {
        $this->assertEquals(
                1, $this->object->plus(0, 1)
        );
    }

    /**
     * Generated from @assert (1, 0) == 1.
     *
     * @covers App\Calculator::plus
     */
    public function testPlus3() {
        $this->assertEquals(
                1, $this->object->plus(1, 0)
        );
    }

    /**
     * Generated from @assert (1, 1) == 2.
     *
     * @covers App\Calculator::plus
     */
    public function testPlus4() {
        $this->assertEquals(
                2, $this->object->plus(1, 1)
        );
    }

    /**
     * Generated from @assert (0, 0) == 0.
     *
     * @covers App\Calculator::minus
     */
    public function testMinus() {
        $this->assertEquals(
                0, $this->object->minus(0, 0)
        );
    }

    /**
     * Generated from @assert (0, 1) == -1.
     *
     * @covers App\Calculator::minus
     */
    public function testMinus2() {
        $this->assertEquals(
                -1, $this->object->minus(0, 1)
        );
    }

    /**
     * Generated from @assert (1, 0) == 1.
     *
     * @covers App\Calculator::minus
     */
    public function testMinus3() {
        $this->assertEquals(
                1, $this->object->minus(1, 0)
        );
    }

    /**
     * Generated from @assert (1, 1) == 0.
     *
     * @covers App\Calculator::minus
     */
    public function testMinus4() {
        $this->assertEquals(
                0, $this->object->minus(1, 1)
        );
    }

    /**
     * Generated from @assert (0, 0) == 0.
     *
     * @covers App\Calculator::multiply
     */
    public function testMultiply() {
        $this->assertEquals(
                0, $this->object->multiply(0, 0)
        );
    }

    /**
     * Generated from @assert (0, 1) == 0.
     *
     * @covers App\Calculator::multiply
     */
    public function testMultiply2() {
        $this->assertEquals(
                0, $this->object->multiply(0, 1)
        );
    }

    /**
     * Generated from @assert (1, 0) == 0.
     *
     * @covers App\Calculator::multiply
     */
    public function testMultiply3() {
        $this->assertEquals(
                0, $this->object->multiply(1, 0)
        );
    }

    /**
     * Generated from @assert (1, 1) == 1.
     *
     * @covers App\Calculator::multiply
     */
    public function testMultiply4() {
        $this->assertEquals(
                1, $this->object->multiply(1, 1)
        );
    }

    /**
     * Generated from @assert (3, 2) == 6.
     *
     * @covers App\Calculator::multiply
     */
    public function testMultiply5() {
        $this->assertEquals(
                6, $this->object->multiply(3, 2)
        );
    }

    /**
     * Generated from @assert (0, 1) == 0.
     *
     * @covers App\Calculator::divide
     */
    public function testDivide() {
        $this->assertEquals(
                0, $this->object->divide(0, 1)
        );
    }

    /**
     * Generated from @assert (1, 1) == 1.
     *
     * @covers App\Calculator::divide
     */
    public function testDivide2() {
        $this->assertEquals(
                1, $this->object->divide(1, 1)
        );
    }

    /**
     * Generated from @assert (6, 2) == 3.
     *
     * @covers App\Calculator::divide
     */
    public function testDivide3() {
        $this->assertEquals(
                3, $this->object->divide(6, 2)
        );
    }

    /**
     * @covers App\Calculator::modulo
     * @todo   Implement testModulo().
     */
    public function testModulo() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
